let katamari, arcanoid;

let playerSprite, squares, circles, textBoxes;
const PLAYER_SPEED = 5;
let playerVars;
let lastDash;
let lastHit;
let state = "startup"
let playerLoadedBool = false;
let levelLoadedBool = false;
let obsticalVars;

let levelStartTimer;


function preload() {
  katamari = loadSound('assets/songfiles/femtanyl_-_KATAMARI.mp3');
  arcanoid = loadSound('assets/songfiles/Cyclone_-_Arcanoid.mp3');
  funFunFunDayo = loadSound('assets/songfiles/Fun_Fun_Fun_dayo_-_Lucky_star.mp3');
}


function setup() {
  createCanvas(windowWidth, windowHeight);

  playerVars = {
    lives: 5,
    speed: PLAYER_SPEED,
    hit: false,
    hitCooldown: 100,
    invincible: false,
    iFrameTimer: 0,
    isDashing: false,
    dashTimer: 0,
    dashCooldown: 300,
    dashMultplier: 3.5,
    width: 30,
    height: 30,
    stretchedMax: 34,
    stretchedMin: 26,
    nonStretched: 30,
    colour: color(0, 254, 255),
  };

  obsticalVars = {
    defaultColour: color(252, 31, 109),
    spawnColour: color(255, 255, 255),
  };

  

  obstacles();
}

function draw() {

  rectMode(CENTER);

  if (state === "startup") {
    startupMenu();
  }
  else if (state === "mainMenu") {
    mainMenu();
  }
  else if (state === "levelLoaded -1") {
    background(30, 5, 20);
    playerLoad();
    movement();
    border();
    loadLevel(-1);
    hit();
    spawnObsticalColourChange();
  }

  else if (state === "levelLoaded 1") {
    background(30, 5, 20);
    playerLoad();
    movement();
    border();
    loadLevel(1);
    hit();
    spawnObsticalColourChange();
  }
  

  
  
}

function mousePressed() {
  if (state === "startup") {
    state = "mainMenu"
  }
  if (state === "mainMenu") {
    if (mouseX >= width/2-100&& mouseX <= width/2+100&& mouseY >= height/3*2-25&& mouseY <= height/3*2+25) {
      state = "levelLoaded -1"
    }
  }
} 

function windowResized() {
  resizeCanvas(windowWidth, windowHeight);
}

function movement() {
  // movement
	if (kb.pressing("right")&&!playerVars.hit) {
  playerSprite.vel.x = playerVars.speed;
	playerSprite.vel.y = 0;
  playerSprite.height = playerVars.stretchedMin;
  playerSprite.bearing = 'right';
  } 
	if (kb.pressing("left")&&!playerVars.hit) {
  playerSprite.vel.x = -playerVars.speed;
	playerSprite.vel.y = 0;
  playerSprite.height = playerVars.stretchedMin;
  playerSprite.bearing = 'left';
  }
	if (kb.pressing("up")&&!playerVars.hit) {
  playerSprite.vel.y = -playerVars.speed;
  playerSprite.width = playerVars.stretchedMin;
  playerSprite.bearing = 'up';
  } 
	if (kb.pressing("down")&&!playerVars.hit) {
  playerSprite.vel.y = playerVars.speed;
  playerSprite.width = playerVars.stretchedMin;
  playerSprite.bearing = 'down';
  } 
	if (!kb.pressing("right")&&!kb.pressing("left")&&!kb.pressing("down")&&!kb.pressing("up")) {
	playerSprite.vel.x = 0;
	playerSprite.vel.y = 0;

  playerSprite.height = playerVars.nonStretched;
  playerSprite.width = playerVars.nonStretched;
  }
  if (kb.pressing("right")&&kb.pressing("left")&&kb.pressing("down")&&kb.pressing("up")) {
  playerSprite.vel.x = 0;
  playerSprite.vel.y = 0;
  }
  if (kb.pressing("right")&&kb.pressing("left")) {
	playerSprite.vel.x = 0;
  }
  if (kb.pressing("up")&&kb.pressing("down")) {
	playerSprite.vel.y = 0;
  }

  //DASH
  if (kb.presses("space")) {
  if (!playerVars.isDashing) {
  lastDash = millis();
  playerVars.speed *= playerVars.dashMultplier;
  playerVars.invincible = true;
  playerVars.isDashing = true;
  }
	}
  if (millis() > lastDash + playerVars.dashCooldown) {
  playerVars.speed = PLAYER_SPEED;
  playerVars.invincible = false;
  playerVars.isDashing = false;
  } 
}

function border() {
  if (playerSprite.x < 15) {
    playerSprite.x = 15;
    }
    
    if (playerSprite.x > width-15) {
    playerSprite.x = width-15;
    }
    
    if (playerSprite.y < 15){
    playerSprite.y = 15;
    }
  
    if (playerSprite.y > height-15){
    playerSprite.y = height-15;
    }
}

function reset() {
  squares.removeAll();
  circles.removeAll();
  // playerSprite.removeAll();
}
function startupMenu() {
  background(30, 5, 20);
  textSize(50);
  fill(255, 0, 67)
  text("Click To Load Main Menu", width/2-300, height/2);
}
function mainMenu() {
  background(30, 5, 20);
  fill(83, 4, 28)
  stroke(255, 0, 85)
  strokeWeight(10)
  rect(width/2,height/3*2, 200, 50, 50)

}
function playerLoad() {
  if (!playerLoadedBool) {
    noStroke();
    //create sprite
    playerSprite = new Sprite(width/2, height/2, 30, 30);
    playerSprite.color = playerVars.colour;
    playerSprite.rotationLock = true;
    playerSprite.vel.x = 0;
    playerSprite.vel.y = 0;
    playerSprite.layer = 2;

    playerLoadedBool = true;
  }
}
function obstacles() {
  noStroke();
  // create obsticles group
  //squares
  squares = new Group();
  squares.colour = obsticalVars.spawnColour;
  squares.collider = "n";
  squares.friction = 0;
  squares.layer = 1;
  //circles
  circles = new Group();
  circles.colour = obsticalVars.spawnColour;
  circles.collider = "n";
  circles.friction = 0;
  circles.layer = 1;
}

function textBoxesFunc() {
  textBoxes = new Group();
  textBoxes.colour = color(252, 31, 109);
  textBoxes.layer = 1;
  textBoxes.textSize = 40;
  textBoxes.collider = 'none';
}

async function spawnObsticalColourChange() {
  await sleep(100);
  squares.colour = lerpColor(squares.colour, obsticalVars.defaultColour, 0.21)
  circles.colour = lerpColor(circles.colour, obsticalVars.defaultColour, 0.21)
}

function loadLevel(levelId) {
  if (!levelLoadedBool) {
    background(30, 5, 20);
    if (levelId === -1) {
      level_test();
    }
    if (levelId === 1) {
      level_Katamari();
    }

    levelLoadedBool = true;
  }
}

async function level_test() {
  strokeWeight(0);
  noStroke();
  obstacles();
  textBoxesFunc();
  levelStartTimer = millis();
  funFunFunDayo.play();

  await sleep(490);
  new textBoxes.Sprite(width/2, height/4, 800, 70);
  textBoxes.text = 'Welcome to Just Circles and Squares!';

  await sleep(3000);
  textBoxes.w = 1000;
  textBoxes.text = 'This game is all about dodging these red obstacles!';

  await sleep(175);
  new squares.Sprite(width/4, 400, 100, 100);
  new circles.Sprite(width - width/4, 400, 100);

  await sleep(3000);
  textBoxes.w = 1100;
  textBoxes.text = "Upon touching these obstacles you'll be launched away."

  await sleep(2000);
  textBoxes.w = 300;
  textBoxes.text = "Give it a try!"

  await sleep(1500);

  textBoxes.w = 600;
  textBoxes.text = "Move with (W, A, S, D)."

  await sleep(20000); 
  
  circles.removeAll();
  squares.removeAll();

  await sleep(200);
  
  textBoxes.w = 700
  textBoxes.text = 'Press space to perform a dash!'

  await sleep(2000); 

  textBoxes.w = 300
  textBoxes.text = 'Neat right?'

  await sleep(3000);

  textBoxes.w = 950
  textBoxes.text = 'Now try jumping back and forth over this obstacle.'

  await sleep(250);


  playerSprite.x = width/4
  playerSprite.y = height/2
  new squares.Sprite(width/2, height/2+120, 25, 600);


  // await sleep(1100);
  // new squares.Sprite(400, 400, 50, 50);
}

function level_Katamari() {
  obstacles();
  levelStartTimer = millis(); 
  katamari.play();

}

function hit() {
  if (!playerVars.invincible&&(playerSprite.overlaps(squares)||playerSprite.overlaps(circles))) {
    playerVars.lives--;
    if (!playerVars.hit) {
      lastHit = millis();
      playerVars.hit = true;
      
      if (playerSprite.bearing === 'up') {
        playerSprite.vel.y += 30;
      }
      if (playerSprite.bearing === 'down') {
        playerSprite.vel.y -= 30;
      }
      if (playerSprite.bearing === 'right') {
        playerSprite.vel.x -= 30;
      }
      if (playerSprite.bearing === 'left') {
        playerSprite.vel.x += 30;
      }
    }
  }

  //knockback
  if (millis() > lastHit + playerVars.hitCooldown) {
    playerVars.hit = false;
  } 
}

function sleep(millisecondsDuration)
{
  return new Promise((resolve) => {
    setTimeout(resolve, millisecondsDuration);
  })
}

//  ‚ï±|-„ÄÅ
// (ÀöÀé„ÄÇ7  
// |„ÄÅÀú„Äµ          
// „Åò„ÅóÀç,)„Éé

// /·ê† - Àï-„ÉûÔΩ°Àö·∂ª ùóì 

// /·ê†Àµ- ‚©ä -Àµ„Éû

// ·®ê·µâ·µí ∑

// ùë¥ùíÜùíêùíò. (‚Ä¢- ‚Ä¢„Éû

// ['‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä    ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚¢ø‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä    ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£∂‚£§‚£§‚£§‚£§‚£§‚£§‚£∂‚£∂‚£∂‚£∂‚£∂‚†∂‚†∂‚£∂‚£¶‚£§‚£Ä‚¢†‚°ü‚†Ä‚¢ø‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†õ‚†Å‚†Ä‚†à‚¢ª‚£ø‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚£ø‚£ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä  ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£ø‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä  ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£∑‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä  ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£¥‚£ø‚†ü‚£±‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚°è‚†õ‚¢ø‚£¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£è‚†Å‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°á‚†Ä‚†Ä‚†à‚†ª‚¢∑‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä‚†Ä‚†Ä‚£Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚£¶‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚†ø‚£ø‚£ø‚¢è‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ø‚£ø‚£ü‚¢ø‚°è‚†Ä‚†Ä‚†Ä‚†ö‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚¢ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚£∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚£∑‚†ª‚¢ø‚£¨‚£©‚†Ä‚†â‚†â‚†â‚†ø‚†ô‚£∑‚£∂‚£∂‚£∂‚£∂‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°ú‚†Å‚†à‚†ª‚£∑‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£∑‚£Ñ‚†à‚†ô‚†∑‚°ñ‚†§‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚°ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚£Ä‚°Ä‚¢†‚†û‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢à‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£¶‚£Ä‚†Ä‚£ß‚†Ä‚†Ä‚†Ä‚£†‚£ø‚£ø‚°ø‚£µ‚†É‚†Ä‚¢ª‚°∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢Ñ‚¢Ä‚£§‚°æ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚¢∑‚£æ‚£§‚£∂‚£æ‚†ø‚£ø‚£ø‚°á‚£ø‚°Ä‚†Ä‚¢®‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£æ‚°ø‚†ã‚†â‚†â‚†ô‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢â‚£ø‚¢ø‚°ú‚°î‚¢ç‚†É‚†ò‚£∑‚£§‚°æ‚†ã‚†∂‚†ã‚†£‚¢¥‚†ª‚£Ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ª‚£ø‚£ø‚£ø‚†Å‚†Ä‚†Ä‚£Ä‚£†‚£¥‚†æ‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚†á‚†à‚°ø‚¢∏‚¢ò‚†í‚†¢‚°§‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚£¶‚£Ä‚£Ä‚£Ä‚£º‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚°õ‚¢ª‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£ø‚†ã‚†Ä‚¢∏‚†á‚°á‚†Ä‚†Ä‚°ñ‚¢§‚°Ñ‚†Ä‚¢∞‚£Ä‚£Ä‚°Ä‚†Ä‚£Ä‚†Ä‚†à‚†ª‚°ü‚†õ‚†â‚†Ä‚°¨‚†ü‚£´‚£Ω‚£º‚°ø‚†É‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£æ‚†ü‚†Å‚†Ä‚†Ä‚†ò‚†∂‚¢æ‚£∑‚£¶‚£ú‚£ö‚†Å‚†Ä‚†Ä‚†â‚£Ø‚†ô‚†ã‚†ª‚£á‚†Ä‚£∂‚£Ω‚£Ø‚¢ø‚°Ω‚†á‚°º‚£ø‚†ü‚†â‚†Ä‚†Ä‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚†ø‚£ã‚°Å‚£†‚†ñ‚†≤‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚£ø‚¢∂‚£∂‚£§‚£º‚£ß‚£§‚£Ñ‚£π‚£Ä‚£à‚£ø‚£•‚£∂‚£ñ‚£í‚£É‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚†ü‚¢°‚†û‚£±‚£≥‚†É‚†Ä‚†Ä‚†∑‚†§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£π‚£Ñ‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ã‚†â‚†ô‚†õ‚†õ‚¢ã‚£†‚£§‚£Ä‚£Ä‚°¥‚†∫‚¢ø‚£¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚†É‚¢†‚†É‚¢†‚¢ß‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£†‚£∂‚°ø‚†ü‚¢õ‚°ø‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚°Ñ‚†Ä‚†à‚†â‚†Ä‚†Ä‚¢∏‚†è‚£ô‚£ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°è‚†Ä‚¢∏‚†Ä‚£º‚¢∏‚†Ä‚†Ä‚¢Ä‚£†‚£¥‚£ø‚°ø‚†ü‚¢Å‚£†‚†î‚†ã‚†Ä‚†Ä‚†Ä‚£Ä‚£â‚£ô‚£è‚£π‚£ø‚£ü‚¢π‚£ø‚†Ä‚†Ä‚¢Ä‚£†‚†¥‚¢≤‚°π‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚°æ‚¢∏‚†Å‚¢≥‚†π‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†∏‚°Ñ‚†π‚£ú‚£õ‚°≠‚†µ‚¢∫‚£ø‚°Å‚†Ä‚†Ä‚†à‚†≥‚£Ñ‚°Ä‚†Ä‚†Ä‚¢∏‚°ü‚†â‚°Ω‚£ø‚†ª‚£§‚¢π‚£ø‚£ø‚£†‚†î‚†â‚¢∏‚¢Ä‚†Ä‚†±‚£å‚†£‚£Ñ‚†Ä‚£º‚¢°‚†è‚†Ä‚¢∏‚°Ñ‚¢ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ß‚†Ä‚†Ä‚†ô‚¢¶‚£Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£ª‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚£∏‚£ß‚†Ä‚£∑‚†ü‚¢∑‚£º‚£º‚°á‚¢ø‚£á‚†Ä‚†Ä‚†à‚¢á‚†Ç‚†Ä‚†à‚†≥‚¢å‚°õ‚¢É‚†é‚†Ä‚†Ä‚¢∏‚†Ä‚£æ‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ß‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚†â‚†Å‚¢Ä‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†≥‚†ñ‚†â‚£ø‚†õ‚¢∑‚£õ‚¢∑‚°ü‚£±‚°ü‚¢ø‚°ò‚£ø‚°Ñ‚†Ä‚†Ä‚†à‚†≥‚£Ñ‚†Ä‚†Ä‚†Ä‚†â‚†â‚†Ä‚¢Ä‚£†‚†É‚¢∞‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†∑‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£Ü‚†Ä‚†ô‚†ø‚°ø‚†è‚†Ä‚¢∏‚°á‚†ò‚¢ø‚£¶‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†í‚†í‚†í‚†í‚†ö‚†â‚†Ä‚£∞‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†õ‚†∑‚†∂‚†∂‚£ø‚°è‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†õ‚†Ç‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚†Å‚†Ä‚†à‚†ª‚£ø‚£¶‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£æ‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä  ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚°á‚†à‚†ª‚£¶‚£Ñ‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°æ‚†É‚†Ä‚£Ä‚£§‚£æ‚°ø‚†õ‚†õ‚¢ø‚£∑‚£∂‚£∂‚£æ‚£ø‚†ü‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä  ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚£ø‚£§‚°Ä‚†Ä‚†â‚†õ‚†ø‚¢∂‚£¶‚£§‚£§‚£Ä‚£Ä‚£†‚£§‚£æ‚£ø‚£∑‚£æ‚£ø‚£ø‚£è‚†Å‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚£ø‚£∂‚£¶‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚†ò‚¢∑‚°ù‚†¶‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚†â‚†â‚£Ω‚£ø‚†ø‚†õ‚†ã‚†â‚¢ª‚°ü‚†ø‚£ø‚£∂‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ô‚†õ‚¢ø‚£∑‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚†Ä‚£†‚°ø‚¢∂‚£§‚£ç‚£ì‚†í‚†¶‚†§‚°Ä‚†Ä‚£æ‚°ü‚¢ø‚£¶‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚†Ä‚†à‚†ª‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚°Ü‚†Ä‚¢Ä‚°à‚†õ‚¢ø‚£∑‚°Ä‚†Ä‚†Ä ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚£æ‚†ü‚†Å‚†Ä‚†à‚†â‚†õ‚†õ‚†õ‚†≥‚°Ü‚¢∏‚£ø‚†Å‚†Ä‚£ø‚°á‚†Ä‚†Ä‚†ò‚†É‚†Ä‚†Ä‚¢Ä‚°û‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†Å‚†Ä‚†Ä‚†π‚£ø‚£¶‚†Ä ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ª‚°ü‚†õ‚†∑‚£¶‚†Ä‚¢Ä‚£Ä‚£§‚£Ä‚£†‚£ß‚¢∏‚£ø‚¢¶‚£Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°§‚†û‚†Å‚†∏‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†ü‚†Ä‚†Ä‚†∏‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£ß ',
// '‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£∑‚†Ä‚†Ä‚¢π‚°∂‚†ü‚¢ª‚£ç‚†â‚†ø‚†ü‚†ò‚£ø‚°Ñ‚†à‚†â‚†í‚†í‚†í‚†í‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ß‚†Ä‚†Ä‚£Ä‚£†‚†§‚†§‚†§‚†§‚†§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø']